#ifndef modern_cpp_template_CONFIG_HPP
#define modern_cpp_template_CONFIG_HPP

#include <concepts>
#include <string_view>

// this is a basic example of how a CMake configured file might look
// in this particular case, we are using it to set the version number of our
// executable
namespace modern_cpp_template::options {

// Convert CMake value types: OFF, ON
// to: 0, 1 which C++ can easily handle
enum class Cmake_Bool { OFF, ON };
using enum Cmake_Bool;

template <typename T>
concept Is_Bool = std::convertible_to<T, bool>;

template <typename T>
concept Cast_Bool = !std::convertible_to<T, bool> && requires(T a) {
  { static_cast<bool>(a) } -> std::convertible_to<bool>;
};

template <Is_Bool T>
inline constexpr bool convert_cmake_bool(T in_bool) {
  return in_bool;
}

template <Cast_Bool T>
inline constexpr bool convert_cmake_bool(T in_bool) {
  return static_cast<bool>(in_bool);
}

// Convert CMake string & integer options to C++ constexpr std::string_view and
// int respectively
// clang-format off
inline constexpr std::string_view kProjectName = "@PROJECT_NAME@";
inline constexpr std::string_view kProjectVersion = "@PROJECT_VERSION@";
inline constexpr int kProjectVersionMajor { @PROJECT_VERSION_MAJOR@ };
inline constexpr int kProjectVersionMinor { @PROJECT_VERSION_MINOR@ };
inline constexpr int kProjectVersionPatch { @PROJECT_VERSION_PATCH@ };
inline constexpr int kProjectVersionTweak { @PROJECT_VERSION_TWEAK@ };
inline constexpr std::string_view kGitSha = "@GIT_SHA@";
inline constexpr std::string_view kSystemName = "@SYSTEM_NAME@";
inline constexpr std::string_view kSystemVersion = "@SYSTEM_VERSION@";
inline constexpr std::string_view kSystemProcessor = "@SYSTEM_PROCESSOR@";

// Convert CMake Boolean options from PPD to constexpr bool
inline constexpr bool kEnableInternalDebugging {convert_cmake_bool(@modern_cpp_template_ENABLE_INTERNAL_DEBUGGING@)};

inline constexpr bool kEnableSanitizerAddress {convert_cmake_bool(@modern_cpp_template_ENABLE_SANITIZER_ADDRESS@)};
inline constexpr bool kEnableSanitizerLeak {convert_cmake_bool(@modern_cpp_template_ENABLE_SANITIZER_LEAK@)};
inline constexpr bool kEnableSanitizerUndefined {convert_cmake_bool(@modern_cpp_template_ENABLE_SANITIZER_UNDEFINED@)};
inline constexpr bool kEnableSanitizerThread {convert_cmake_bool(@modern_cpp_template_ENABLE_SANITIZER_THREAD@)};
inline constexpr bool kEnableSanitizerMemory {convert_cmake_bool(@modern_cpp_template_ENABLE_SANITIZER_MEMORY@)};
inline constexpr bool kEnableSanitizerHardening {convert_cmake_bool(@modern_cpp_template_ENABLE_HARDENING@)};

constexpr bool is_debug() {
  #if defined(NDEBUG)
    return false;
  #else
    return true;
  #endif
}

// clang-format on

}  // namespace modern_cpp_template::options

#endif
