#ifndef MYPROJECT_CONFIG_HPP
#define MYPROJECT_CONFIG_HPP

#include <string_view>

// this is a basic example of how a CMake configured file might look
// in this particular case, we are using it to set the version number of our
// executable
namespace myproject::options {

// Convert CMake value types: OFF, ON
// to: 0, 1 which C++ can easily handle
enum class Cmake_Bool { OFF, ON };

// Convert CMake string & integer options to C++ constexpr std::string_view and
// int respectively
// clang-format off
inline constexpr std::string_view project_name = "@PROJECT_NAME@";
inline constexpr std::string_view project_version = "@PROJECT_VERSION@";
inline constexpr int project_version_major { @PROJECT_VERSION_MAJOR@ };
inline constexpr int project_version_minor { @PROJECT_VERSION_MINOR@ };
inline constexpr int project_version_patch { @PROJECT_VERSION_PATCH@ };
inline constexpr int project_version_tweak { @PROJECT_VERSION_TWEAK@ };
inline constexpr std::string_view git_sha = "@GIT_SHA@";

// Convert CMake Boolean options from PPD to constexpr bool
inline constexpr bool enable_internal_debugging {
  static_cast<bool>(Cmake_Bool::@myproject_ENABLE_INTERNAL_DEBUGGING@)
};
// clang-format on

}  // namespace myproject::options

#endif
